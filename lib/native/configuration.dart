// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum AppThemes {
  dark,
  light,
}

enum AppVersion {
  dev,
  beta,
  stagging,
}

class UserModel {
  UserModel({
    this.userName,
    this.userPassword,
  });

  String? userName;
  String? userPassword;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['userName'] = userName;
    pigeonMap['userPassword'] = userPassword;
    return pigeonMap;
  }

  static UserModel decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return UserModel(
      userName: pigeonMap['userName'] as String?,
      userPassword: pigeonMap['userPassword'] as String?,
    );
  }
}

class AppThemesResult {
  AppThemesResult({
    this.errorMessage,
    this.state,
  });

  String? errorMessage;
  AppThemes? state;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['errorMessage'] = errorMessage;
    pigeonMap['state'] = state?.index;
    return pigeonMap;
  }

  static AppThemesResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppThemesResult(
      errorMessage: pigeonMap['errorMessage'] as String?,
      state: pigeonMap['state'] != null
          ? AppThemes.values[pigeonMap['state']! as int]
          : null,
    );
  }
}

class AppVersionResult {
  AppVersionResult({
    this.errorMessage,
    this.version,
  });

  String? errorMessage;
  AppVersion? version;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['errorMessage'] = errorMessage;
    pigeonMap['version'] = version?.index;
    return pigeonMap;
  }

  static AppVersionResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppVersionResult(
      errorMessage: pigeonMap['errorMessage'] as String?,
      version: pigeonMap['version'] != null
          ? AppVersion.values[pigeonMap['version']! as int]
          : null,
    );
  }
}

class Version {
  Version({
    this.major,
    this.minor,
    this.patch,
  });

  int? major;
  int? minor;
  int? patch;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['major'] = major;
    pigeonMap['minor'] = minor;
    pigeonMap['patch'] = patch;
    return pigeonMap;
  }

  static Version decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Version(
      major: pigeonMap['major'] as int?,
      minor: pigeonMap['minor'] as int?,
      patch: pigeonMap['patch'] as int?,
    );
  }
}

class _ConfigurationApiCodec extends StandardMessageCodec {
  const _ConfigurationApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppThemesResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is AppVersionResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is UserModel) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is Version) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AppThemesResult.decode(readValue(buffer)!);
      
      case 129:       
        return AppVersionResult.decode(readValue(buffer)!);
      
      case 130:       
        return UserModel.decode(readValue(buffer)!);
      
      case 131:       
        return Version.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ConfigurationApi {
  /// Constructor for [ConfigurationApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ConfigurationApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ConfigurationApiCodec();

  Future<AppThemesResult?> fetchTheme() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConfigurationApi.fetchTheme', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as AppThemesResult?);
    }
  }

  Future<AppVersionResult> fetchVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConfigurationApi.fetchVersion', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AppVersionResult?)!;
    }
  }

  Future<UserModel?> fetchUser() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConfigurationApi.fetchUser', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as UserModel?);
    }
  }

  Future<void> updateVersion(Version arg_version) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConfigurationApi.updateVersion', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_version]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<String?> fetchCurrent() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ConfigurationApi.fetchCurrent', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as String?);
    }
  }
}
